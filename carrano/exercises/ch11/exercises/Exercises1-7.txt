Exercise 1)

      void selectionSort(ItemType theArray[], int n)
      {
        for (int last = n - 1; last >= 1; last––)                             n-1 checks
        {
1 op      int largest = findIndexofLargest(theArray, last+1);
3 ops     std::swap(theArray[largest], theArray[last]);
        }
      
        int findIndexofLargest(const ItemType theArray[], int size)
        {
          int indexSoFar = 0;
1 op      for (int currentIndex = 1; currentIndex < size; currentIndex++)     m-1 checks
          {
1 op        if (theArray[currentIndex] > theArray[indexSoFar])
1 op          indexSoFar = currentIndex;
            }
          return indexSoFar; 
        }
      }

n*(n-1)]/2 comparisons in findIndexofLargest

Including control loop and array index manipulations, there are 3x operations
3*n*(n-1)/2

In the outer loop, we can count the array index manipulation (last+1), which adds (n-1) operations

In total,
3n(n-1)/2 + n-1
(3/2) * [(n^2/2) - n/2] + n-1

n^2 is still the highest order term.

Exercise 2)

20 80 40 25 60 40
20 80 40 25 60 40
20 40 80 25 60 40
20 25 40 80 60 40
20 25 40 60 80 40
20 25 40 40 60 80

Exercise 3)

 7 12 24  4 19 32
 4 12 24  7 19 32
 4  7 24 12 19 32
 4  7 12 24 19 32
 4  7 12 19 24 32
 4  7 12 19 24 32

Exercise 4)

12 23  5 10 34
23 12  5 10 34
23 12 10  5 34
23 12 10 34  5
23 12 34 10  5
23 34 12 10  5
34 23 12 10  5

Exercise 5)

Exercise 6)

a) n*(n-1)/2
b) (n-1)

Exercise 7)

Mis-ordered
5 4 3 2 1