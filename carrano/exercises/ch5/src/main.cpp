#include "headers.h"
#include "exercises.h"

using namespace std;

int main()
{
  // Exercise 1
  cout << "Exercise 1" << endl;
  string pal = "abcdeba";
  //string pal = "abcdcba";
  cout << "string \"" << pal << "\" is" << (isPal(pal) ? " " : " not ") << "a palindrome" << endl;

  string AnBn = "AABB";
  //string AnBn = "AAAABBBB";
  cout << "string \"" << AnBn << "\" is" << (isAnBn(AnBn) ? " " : " not ") << "AnBn" << endl;

  // string expr = "AABCBAA";
  // string expr = "AACBAA";
  string expr = "ABABBACABBABA";
  // <expr> = <x> C <y>
  // <x> = A | B | A <x> | B <x>
  // <y> = reverse(<x>)

  cout << "string \"" << expr << "\" is" << (isForm(expr.c_str(), expr.length()) ? " " : " not ") << "of the form xCy" << endl;

  // <d-xcy> = <xcy> | <d-xcy> D <xcy>
  cout << "string \"" << expr << "\" is" << (isDXCY(expr.c_str(), expr.length()) ? " " : " not ") << "of the form DxCy" << endl;

  // expr = "ABBCBBADACADBABCBABDAABACABAA";
  // expr = "ABBCBBADAACAADBBABCBABBDAAABACABAAADABBBBBACABBBBBA";
  expr = "ACAD";

  cout << "string \"" << expr << "\" is" << (isDXCY(expr.c_str(), expr.length()) ? " " : " not ") << "of the form DxCy" << endl;

  string prefix = "*/abc";
  cout << "the end of prefix expression \"" << prefix << "\" is " << endPre(prefix,0) << endl;

  map<char, int> values;
  values['a'] = 4;
  values['b'] = 2;
  values['c'] = 3;

  cout << "the evaluation of prefix expression \"" << prefix << "\" is " << evaluatePre(values, prefix) << endl;

  // Exercise 2
  cout << "Exercise 2" << endl;
  // <S> = $|<W>|$ <S>
  // <W> = abb|a <W> bb

  // vector<string> s = {"$",  "$$", "$$$", "$$$$", "$$$$$", "$$$$$$", "$$$$$$$$", ...
  //                      "abb", "$abb", "$$abb", "$$$abb", "$$$$abb", ...
  //                      "aabbbb", "$aabbbb",}

  vector<string> S_list = generateWordsWithGrammarExercise2();

  // Display the results
  cout << "All valid words generated by the grammar with 7 letters or fewer:\n";
  cout << "---------------------------------------------------------------\n";
  for (const auto& word : S_list) {
      cout << word << endl;
  }

  // Exercise 3
  cout << "Exercise 3" << endl;
  // <S> = <upper>|<upper><s>
  // <s> = <lower>|<lower><s>

  char c = 'x';
  int length = 5;
  cout << "generated word with grammar: " << generateWordWithGrammarExercise3(c, length) << endl;

  // Exercise 4
  cout << "Exercise 4" << endl;
  // <S> = <base>|base.|base-
  // <base> = ...-|..--|---.|--..
  length = 7;

  S_list = generateWordsWithGrammarExercise4(length);

  // Display the results
  cout << "All valid words generated by the grammar with 7 letters or fewer:\n";
  cout << "---------------------------------------------------------------\n";
  for (const auto& word : S_list) {
      cout << word << endl;
  }

  // Exercise 5
  cout << "Exercise 5" << endl;
  // <S> = X|X<T>
  // <T> = X<T>|Z<T>|Y
  length = 3;

  S_list = generateWordsWithGrammarExercise5(length);

  // Display the results
  cout << "All valid words generated by the grammar with 3 letters or fewer:\n";
  cout << "---------------------------------------------------------------\n";
  for (const auto& word : S_list) {
      cout << word << endl;
  }

  return 0;
} 